#!/usr/bin/env node
var arg, args, argv, coffee, events, f, fileExt, files, fs, help, path, report, stylize, util, vows, _i, _len;
path = require('path');
fs = require('fs');
util = require('util');
events = require('events');
try {
  coffee = require('coffee-script');
  fileExt = /\.(js|coffee)$/;
} catch (e) {
  fileExt = /\.js$/;
}
vows = require('../lib/vows/index');
report = require('../lib/vows/report');
stylize = require('../lib/vows/stylize');
help = ['usage: vows [FILE, ...] [options]', '', 'options:', '  -s, --silent      Don\'t report', '  --json            Use JSON reporter', '  --spec            Use Spec reporter', '  --dot-matrix      Use Dot-Matrix reporter (default)', '  --version         Show version', '  -h, --help        You\'re staring at it'].join('\n');
args = [];
argv = process.argv.slice(2);
while ((arg = argv.shift())) {
  if (arg === __filename) {
    continue;
  }
  if (arg[0] !== '-') {
    args.push(arg);
  } else {
    switch (arg.match(/^--?(.+)/)[1]) {
      case 'json':
        report.reporter = new report.JSONReporter;
        break;
      case 'spec':
        report.reporter = new report.SpecReporter;
        break;
      case 'dot-matrix':
        report.reporter = new report.DotMatrixReporter;
        break;
      case 'html-spec':
        report.reporter = new report.HTMLSpecReporter;
        break;
      case 'silent':
      case 's':
        report.reporter = new report.BaseReporter;
        break;
      case 'version':
        console.log('vows ' + vows.version);
        process.exit(0);
        break;
      case 'help':
      case 'h':
        console.log(help);
        process.exit(0);
    }
  }
}
if (!(report.reporter != null)) {
  report.reporter = new report.DotMatrixReporter;
}
stylize.Stylizer = stylize.ConsoleStylizer;
files = (function() {
  var _i, _len, _results;
  _results = [];
  for (_i = 0, _len = args.length; _i < _len; _i++) {
    arg = args[_i];
    _results.push(path.join(process.cwd(), arg.replace(fileExt, '')));
  }
  return _results;
})();
for (_i = 0, _len = files.length; _i < _len; _i++) {
  f = files[_i];
  require(f);
}
vows.runner.on('end', function() {
  var results, status;
  results = vows.runner.results;
  status = (results.errored && 2) || (results.broken && 1) || 0;
  report.report(['finish', results]);
  if (process.stdout.write('')) {
    return process.exit(status);
  } else {
    return process.stdout.on('drain', function() {
      return process.exit(status);
    });
  }
});
vows.runner.run();
